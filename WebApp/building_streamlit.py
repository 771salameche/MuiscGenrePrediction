# -*- coding: utf-8 -*-
"""
Created on Sat May  4 17:09:49 2024

@author: salah
"""

import streamlit as st
import os
import librosa
import numpy as np
import base64
from pydub import AudioSegment
from tensorflow.keras.models import load_model
from streamlit_option_menu import option_menu

st.set_page_config(page_title="Pr√©diction de Genre Musical",
                   page_icon='üéµ',
                   layout='wide',
                   initial_sidebar_state="expanded",)


music_png = 'https://upload.wikimedia.org/wikipedia/commons/thumb/1/1d/Nuvola_Moroccan_flag.svg/640px-Nuvola_Moroccan_flag.svg.png'
#st.sidebar.image(music_png, width=100, use_column_width=True, output_format='auto')




# Charger les mod√®les
model1 = load_model(r"C:\Users\salah\model_1.h5")
model2 = load_model(r"C:\Users\salah\mod√®le_RNN_LSTM_1.h5")

# Initialisation de audio_features
audio_features = None

def custom_css():
    css = """
    <style>
    /* Changer la couleur de la barre lat√©rale */
    .st-emotion-cache-6qob1r.eczjme3 {
    background-color: #1DB954 !important;  # Vert de Spotify
    }
    </style>
    """
    st.markdown(css, unsafe_allow_html=True)

    
    
    
    
# Fonction pour ajouter du CSS personnalis√© avec une image d'arri√®re-plan
def add_custom_css(background_image_path):
    with open(background_image_path, "rb") as img_file:
        image_data = img_file.read()

    encoded_image = base64.b64encode(image_data).decode()  # Encodage base64

    # Ajout de CSS personnalis√© avec une image d'arri√®re-plan
    st.markdown(
        f"""
        <style>
        .stApp {{
            background-image: url("data:image/jpg;base64,{encoded_image}");
            background-size: cover;
        }}
        </style>
        """,
        unsafe_allow_html=True,
    )

#add_custom_css(r"C:\Users\salah\Downloads\pexels-postiglioni-943535.jpg")






# Liste des genres musicaux 
genres = [
    ('Amazigh (Ahidous)'),
    ('Cha√¢bi'),
    ('Gnawa'),
    ('Malhun'),
    ('Musique Andalouse'),
    ('Rap et Hip-Hop Marocain'),
    ('Ra√Ø'),
    ('Reggada'),
    ('Sufi')
]



# Fonction pour convertir MP3 en WAV
def convert_to_wav(mp3_file_path):
    audio_segment = AudioSegment.from_file(mp3_file_path, format="mp3")
    wav_file_path = os.path.splitext(mp3_file_path)[0] + ".wav"
    audio_segment.export(wav_file_path, format="wav")
    return wav_file_path


def extract_all_features(filename):
    y, sr = librosa.load(filename, duration=30)
    length = len(y)
    
    # Calculer les caract√©ristiques RMS
    rms_mean = librosa.feature.rms(y=y).mean()
    rms_var = librosa.feature.rms(y=y).var()
    
    # Calculer les caract√©ristiques du centro√Øde spectral
    spectral_centroid_mean = librosa.feature.spectral_centroid(y=y, sr=sr).mean()
    spectral_centroid_var = librosa.feature.spectral_centroid(y=y, sr=sr).var()
    
    # Calculer les caract√©ristiques de la largeur de bande spectrale
    spectral_bandwidth_mean_mean = librosa.feature.spectral_bandwidth(y=y, sr=sr).mean()
    spectral_bandwidth_mean_var = librosa.feature.spectral_bandwidth(y=y, sr=sr).var()
    
    # Calculer les caract√©ristiques du rolloff spectral
    rolloff_mean = librosa.feature.spectral_rolloff(y=y, sr=sr).mean()
    rolloff_var = librosa.feature.spectral_rolloff(y=y, sr=sr).var()
    
    # Calculer les caract√©ristiques du taux de passage par z√©ro
    zero_crossing_rate_mean = librosa.feature.zero_crossing_rate(y=y).mean()
    zero_crossing_rate_var = librosa.feature.zero_crossing_rate(y=y).var()
    
    # Calculer les caract√©ristiques de l'harmonie
    y_harmonic = librosa.effects.harmonic(y)
    harmony_mean = np.mean(y_harmonic)
    harmony_var = np.var(y_harmonic)
    
    # Calculer les caract√©ristiques du percussif
    y_percussive = librosa.effects.percussive(y)
    percussive_mean = np.mean(y_percussive)
    percussive_var = np.var(y_percussive)
    
    # Calculer le tempo
    tempo, _ = librosa.beat.beat_track(y=y, sr=sr)
    
    # Calculer les coefficients MFCC
    mfccs = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=20)
    mfcc_means = np.mean(mfccs, axis=1)
    mfcc_vars = np.var(mfccs, axis=1)
    
    # Concat√©ner toutes les caract√©ristiques extraites
    feature = np.concatenate(([length], [rms_mean], [rms_var], [spectral_centroid_mean], [spectral_centroid_var],
                              [spectral_bandwidth_mean_mean], [spectral_bandwidth_mean_var], [rolloff_mean],
                              [rolloff_var], [zero_crossing_rate_mean], [zero_crossing_rate_var], [harmony_mean],
                              [harmony_var], [percussive_mean], [percussive_var], [tempo], mfcc_means, mfcc_vars))

    return feature


# Barre lat√©rale
def main():
    global audio_features  # D√©clarez audio_features comme variable globale

    # Appliquer le CSS personnalis√©
    custom_css()

    with st.sidebar:
    # D√©finition du menu avec option_menu
        page = option_menu("Menu Principal", ["Page d'accueil", "CNN", "RNN-LSTM", "√Ä propos"],
                           icons=["house", "graph-up-arrow", "graph-up-arrow", "info-circle"], 
                           menu_icon="cast", default_index=0)
    st.sidebar.write("¬©2024, Developed By KAYOUH Salaheddine")
    if page == "Page d'accueil":
        st.title("Pr√©diction de Genre Musical avec Deep Learning")

        st.markdown("""
                    ## Bienvenue!
                    Cette application web utilise des mod√®les d'apprentissage profond pour pr√©dire le genre de vos fichiers audio. T√©l√©chargez simplement votre fichier, et laissez l'intelligence artificielle faire le reste.
    
                    ## Comment √ßa fonctionne
                    - **T√©l√©chargez** un fichier audio (formats support√©s: MP3, WAV).
                    - Attendez que le mod√®le **analyse le fichier** et **pr√©dise le genre** musical.
                    - **Consultez les r√©sultats** de la pr√©diction.
    
                    ## Guide d'Utilisation
                    Pour commencer, utilisez le widget de t√©l√©chargement de fichiers dans la barre lat√©rale pour charger votre fichier audio. Vous pouvez voir et √©couter votre fichier ci-dessous une fois charg√©. Ensuite, cliquez sur le bouton de pr√©diction pour obtenir les r√©sultats.
    
                    ## √Ä Propos du Mod√®le
                    Cette application utilise des r√©seaux de neurones CNN (Convolutional Neural Network) et RNN-LSTM (Recurrent Neural Network with Long Short-Term Memory) entra√Æn√©s exclusivement sur un dataset compos√© de fichiers audio de genres musicaux 100% marocains. Ces mod√®les sont con√ßus pour identifier des nuances subtiles dans les audios afin de pr√©dire avec pr√©cision le genre musical.

                    ## Performances du mod√®le
                    - **Pr√©cision de pr√©diction:** 90%
                    - **Temps de r√©ponse:** Moins de 10 secondes en moyenne par fichier audio.
    
                    ## FAQ
                    **Q: Quelle est la pr√©cision du mod√®le ?**
                    **R:** Le mod√®le a une pr√©cision d'environ 90%, mais cela peut varier selon la complexit√© du fichier audio.

                    **Q: Puis-je t√©l√©charger n'importe quel type de fichier audio ?**
                    **R:** Actuellement, seuls les fichiers MP3 et WAV sont support√©s.

                    ## Contact et Feedback
                    Votre feedback est tr√®s important pour nous ! N'h√©sitez pas √† [nous contacter](https://www.linkedin.com/in/salaheddine-kayouh-899b34235/) pour tout commentaire ou question.

                    
                                        """)
    elif page == "CNN":
        st.title("Pr√©diction de Genre Musical avec CNN")
        uploaded_file = st.file_uploader("Choisissez un fichier audio", type=["mp3", "wav"])     
        if uploaded_file:
            # Chemin temporaire
            temp_path = os.path.join("/tmp", uploaded_file.name)

            # Sauvegarder le fichier t√©l√©charg√©
            with open(temp_path, "wb") as f:
                f.write(uploaded_file.getvalue())

            # Convertir en WAV si n√©cessaire
            if uploaded_file.name.lower().endswith(".mp3"):
                temp_path = convert_to_wav(temp_path)

            # Afficher le fichier audio pour lecture
            st.audio(uploaded_file, format="audio/mp3")

            # Extraire les caract√©ristiques audio
            audio_features = extract_all_features(temp_path)

            # Ajuster la forme des caract√©ristiques audio
            audio_features = np.expand_dims(audio_features, axis=0)
            prediction1 = model1.predict(np.expand_dims(audio_features, axis=0))
            predicted_genre_1 = genres[np.argmax(prediction1)]
            st.success(f"Pr√©diction avec le premier mod√®le : {predicted_genre_1}")
    elif page == "RNN-LSTM":
        st.title("Pr√©diction de Genre Musical avec RNN-LSTM ")
        uploaded_file = st.file_uploader("Choisissez un fichier audio", type=["mp3", "wav"])
        if uploaded_file:
            # Chemin temporaire
            temp_path = os.path.join("/tmp", uploaded_file.name)

            # Sauvegarder le fichier t√©l√©charg√©
            with open(temp_path, "wb") as f:
                f.write(uploaded_file.getvalue())

            # Convertir en WAV si n√©cessaire
            if uploaded_file.name.lower().endswith(".mp3"):
                temp_path = convert_to_wav(temp_path)

            # Afficher le fichier audio pour lecture
            st.audio(uploaded_file, format="audio/mp3")

            # Extraire les caract√©ristiques audio
            audio_features = extract_all_features(temp_path)

            # Ajuster la forme des caract√©ristiques audio
            audio_features = np.expand_dims(audio_features, axis=0)
            prediction2 = model2.predict(audio_features)
            predicted_genre_2 = genres[np.argmax(prediction2)]
            st.success(f"Pr√©diction avec le deuxi√®me mod√®le : {predicted_genre_2}")
    elif page == "√Ä propos":
        st.title('√Ä propos de l\'application')
        st.write("""
    Cette application utilise des techniques avanc√©es d'apprentissage machine pour analyser et pr√©dire 
    le genre de fichiers audio sp√©cifiquement marocains. Elle vise √† d√©montrer comment des mod√®les de deep learning
    peuvent √™tre appliqu√©s efficacement dans le domaine du traitement audio.
""")
        st.header('Sources de Donn√©es')
        st.write("""
        Les donn√©es utilis√©es pour entra√Æner ces mod√®les proviennent exclusivement de sources audio marocaines, 
        permettant ainsi au mod√®le de sp√©cialiser dans les particularit√©s de ce genre musical.
    """)
        st.header('Technologies Utilis√©es')
        st.write("""
        Les technologies et librairies principales utilis√©es comprennent:
        - **Python** : Langage de programmation.
        - **Streamlit** : Pour le d√©veloppement rapide d'applications web.
        - **TensorFlow et Keras** : Pour la construction et l'entra√Ænement des mod√®les de machine learning.
        - **Librosa** : Pour l'extraction des caract√©ristiques audio.
    """)
        st.header('Remerciements et Cr√©dits')
        st.write("""
        Un grand merci √† tous ceux qui ont contribu√© au d√©veloppement de cette application, 
        en particulier √† mes coll√®gues et mentors dans le domaine de l'IA.
    """)

        st.header('Futurs D√©veloppements')
        st.write("""
        Les d√©veloppements futurs incluront l'ajout de nouveaux mod√®les pour am√©liorer la pr√©cision des pr√©dictions
        et l'expansion de la base de donn√©es pour inclure d'autres genres audio r√©gionaux.
    """)


if __name__ == "__main__":
    main()
    
    

